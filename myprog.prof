	# gawk profile, created Thu Jan 30 15:14:08 2014

	# BEGIN block(s)

	BEGIN {
		col_mask_string = "Timestamp,Original timestamp,.dict.srcip,.dict.srcport,.dict.dstip,.dict.dstport,.dict.cee.action"
		col_cnt = split(col_mask_string, col_mask, ",")
	}

	# Rule(s)

	{
		num_fields = parse_csv($0, csv, ",", "\"", "\"", "\\n", 1)
		if (NR == 1) {
			for (i = 0; i < num_fields; i++) {
				col_name[csv[i]] = i
			}
		} else {
			if (num_fields < 0) {
				printf "ERROR: %s (%d) -> %s\n", csverr, num_fields, $0
			} else {
				for (i = 1; i < col_cnt; i++) {
					printf "%s,", csv[col_name[col_mask[i]]]
				}
				printf "%s\n", csv[col_name[col_mask[col_cnt]]]
			}
		}
	}


	# Functions, listed alphabetically

	function parse_csv(string, csv, sep, quote, escape, newline, trim, fields, pos, strtrim)
	{
		if (length(string) == 0) {
			return 0
		}
		string = sep string
		fields = 0
		while (length(string) > 0) {
			if (trim && substr(string, 2, 1) == " ") {
				if (length(string) == 1) {
					return fields
				}
				string = substr(string, 2)
				continue
			}
			strtrim = 0
			if (substr(string, 2, 1) == quote) {
				pos = 2
				do {
					pos++
					if (pos != length(string) && (substr(string, pos, 1) == escape && (substr(string, pos + 1, 1) == quote || substr(string, pos + 1, 1) == escape))) {
						string = substr(string, 1, pos - 1) substr(string, pos + 1)
					} else {
						if (substr(string, pos, 1) == quote) {
							strtrim = 1
						} else {
							if (newline && pos >= length(string)) {
								if ((getline) == -1) {
									csverr = "Unable to read the next line."
									return -1
								}
								string = string newline $0
							}
						}
					}
				} while (pos < length(string) && strtrim == 0)
				if (strtrim == 0) {
					csverr = "Missing end quote."
					return -2
				}
			} else {
				if (length(string) == 1 || substr(string, 2, 1) == sep) {
					csv[fields] = ""
					fields++
					if (length(string) == 1) {
						return fields
					}
					string = substr(string, 2)
					continue
				}
				pos = index(substr(string, 2), sep)
				if (pos == 0) {
					csv[fields] = substr(string, 2)
					fields++
					return fields
				}
			}
			if (trim && (pos != length(string) && substr(string, pos + strtrim, 1) == " ")) {
				trim = strtrim
				while (pos < length(string) && substr(string, pos + trim, 1) == " ") {
					trim++
				}
				string = substr(string, 1, pos + strtrim - 1) substr(string, pos + trim)
				if (! strtrim) {
					pos -= trim
				}
			}
			if (pos != length(string) && substr(string, pos + 1, 1) != sep) {
				csverr = "Missing separator."
				return -3
			}
			csv[fields] = substr(string, 2 + strtrim, pos - (1 + strtrim * 2))
			fields++
			string = substr(string, pos + 1)
		}
		return fields
	}
